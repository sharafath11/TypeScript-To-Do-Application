<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>To-Do List</title>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #6a11cb, #2575fc);
      color: #fff;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 2rem;
    }
    .container {
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      padding: 2rem;
      max-width: 700px;
      width: 100%;
      box-shadow: 0px 8px 20px rgba(0, 0, 0, 0.2);
    }
    .title {
      font-size: 2rem;
      margin-bottom: 1rem;
      text-align: center;
      font-weight: bold;
    }
    .todo-input input {
      border: none;
      outline: none;
      padding: 1rem;
      font-size: 1rem;
      border-radius: 8px;
      flex: 1;
    }
    .todo-input button {
      padding: 0.9rem 1.5rem;
      border: none;
      background: linear-gradient(135deg, #ff6a00, #ee0979);
      color: white;
      font-size: 1rem;
      font-weight: bold;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease-in-out;
    }
    .todo-input button:hover {
      background: linear-gradient(135deg, #ee0979, #ff6a00);
      transform: translateY(-2px);
    }
    .task-section h4 {
      font-size: 1.5rem;
      margin-bottom: 1rem;
    }
    .task-list li {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.8rem;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      margin-bottom: 0.8rem;
      transition: all 0.3s ease;
    }
    .task-list li:hover {
      background: rgba(255, 255, 255, 0.3);
    }
    .task-list .delete-btn, .task-list .edit-btn, .task-list .complete-btn {
      font-size: 1rem;
      border: none;
      background: none;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    .task-list .delete-btn:hover, .task-list .edit-btn:hover, .task-list .complete-btn:hover {
      color: #ff3c00;
      transform: scale(1.1);
    }
    .task-list .completed {
      text-decoration: line-through;
      color: #a1ff77;
    }
    .task-list .tick-mark {
      color: #28a745;
      font-size: 1.2rem;
      margin-right: 10px;
    }
    .pending-task {
      justify-content: flex-start;
    }
    .completed-task {
      justify-content: flex-end;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="title">To-Do List</h1>
    <div class="todo-input d-flex mb-4">
      <input
        type="text"
        id="newTask"
        class="form-control me-2"
        placeholder="Add a new task..."
      />
      <button class="btn btn-primary" onclick="addTask()">Add Task</button>
    </div>
    <div class="task-section">
      <h4>Pending Tasks</h4>
      <ul id="pendingList" class="task-list list-unstyled">
        <% todos.forEach(todo => { %>
          <% if (!todo.completed) { %>
            <li class="pending-task">
              <span><%= todo.todo %></span>
              <div>
                <button class="edit-btn" onclick="editTask('<%= todo._id %>', '<%= todo.todo %>')">✏️</button>
                <button class="complete-btn" onclick="completeTask('<%= todo._id %>')">✔️</button>
                <button class="delete-btn" onclick="deleteTask('<%= todo._id %>')">❌</button>
              </div>
            </li>
          <% } %>
        <% }) %>
      </ul>
    </div>
    <div class="task-section mt-4">
      <h4>Completed Tasks</h4>
      <ul id="completedList" class="task-list list-unstyled">
        <% todos.forEach(todo => { %>
          <% if (todo.completed) { %>
            <li class="completed-task">
              <span class="d-flex align-items-center">
                <span class="tick-mark">✔</span>
                <span class="completed"><%= todo.todo %></span>
              </span>
              <button
                class="delete-btn"
                onclick="deleteTask('<%= todo._id %>')"
              >
                ❌
              </button>
            </li>
          <% } %>
        <% }) %>
      </ul>
    </div>
  </div>

  <!-- Axios and Toastify -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


  <script>
    function showToast(message, type = "success") {
      Toastify({
        text: message,
        duration: 3000,
        close: true,
        gravity: "top",
        position: "right",
        backgroundColor: type === "success"
          ? "linear-gradient(to right, #56ab2f, #a8e063)"
          : "linear-gradient(to right, #ff416c, #ff4b2b)",
      }).showToast();
    }
  
    async function addTask() {
      try {
        const todo = document.getElementById("newTask").value;
        if (!todo.trim()) {
          showToast("Task cannot be empty!", "error");
          return;
        }
  
        const response = await axios.post("/addTodo", { todo });
        if (response.data.ok) {
          window.location.reload();
        }
      } catch (error) {
        showToast("Error adding task. Please try again.", "error");
      }
    }
  
    async function deleteTask(taskId) {
      try {
        const response = await axios.delete(`/deleteTodo/${taskId}`);
        if (response.data.ok) {
          showToast("Task deleted successfully!", "success");
          window.location.reload();
        }
      } catch (error) {
        showToast("Error deleting task. Please try again.", "error");
      }
    }
  
    async function completeTask(taskId) {
      try {
        const response = await axios.post(`/completeTodo`, { taskId });
        if (response.data.ok) {
          showToast("Task marked as completed!", "success");
          window.location.reload();
        }
      } catch (error) {
        showToast("Error completing task. Please try again.", "error");
      }
    }
  
    function editTask(taskId, taskText) {
      Swal.fire({
        title: "Edit your task",
        input: "text",
        inputValue: taskText,
        showCancelButton: true,
        confirmButtonText: "Save",
        cancelButtonText: "Cancel",
        inputValidator: (value) => {
          if (!value || !value.trim()) {
            return "Task cannot be empty!";
          }
        },
      }).then((result) => {
        if (result.isConfirmed) {
          const newTask = result.value;
          updateTask(taskId, newTask);
        }
      });
    }
  
    async function updateTask(taskId, newTask) {
      try {
        const response = await axios.post(`/editTodo`, { taskId, todo: newTask });
        if (response.data.ok) {
          showToast("Task updated successfully!", "success");
          window.location.reload();
        }
      } catch (error) {
        showToast("Error updating task. Please try again.", "error");
      }
    }
  </script>
  
  
</body>
</html>
